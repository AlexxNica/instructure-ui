#!/bin/bash -e

########################################
# Make sure working directory is clean #
########################################
if [ ! -z "$(git status --porcelain)" ]; then
  echo Refusing to operate on unclean working directory
  echo Use \"git status\" to see which files have been modified
  exit 1
fi

############################
# Store the current branch #
############################
BRANCH=$(git rev-parse --abbrev-ref HEAD)

build_path=__build__

################
# Read options #
################
while getopts ":t:c:v:p:" opt; do
  case $opt in
    t)
      echo "-t (release tag): $OPTARG" >&2
      tag=" --tag $OPTARG"
      ;;
    c)
      echo "-c (commit sha): $OPTARG" >&2
      commit_sha=$OPTARG
      ;;
    v)
      echo "-c (version): $OPTARG" >&2
      next_version=$OPTARG
      ;;
    p)
      echo "-p (build directory path): $OPTARG" >&2
      build_path=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

########################
# Determine the commit #
########################
if ! [[ $commit_sha ]]; then
  printf "Enter commit SHA or tag to release: "
  read commit_sha
fi

if ! [[ $commit_sha ]]; then
  echo >&2 "Commit SHA or tag is required to release"
  exit 1
fi

########################
# Check out the commit #
########################
printf "Checking out $commit_sha ...\n"
git fetch origin
git checkout $commit_sha

#########################
# Determine the version #
#########################
current_version=$(node -p "require('./package').version")

if ! [[ $next_version ]]; then
  printf "Enter version or <ENTER> to release $current_version: "
  read next_version
fi

if ! [[ $next_version ]]; then
  next_version=$current_version
fi

################################################
# If the version doesn't match package.json... #
################################################
if [[ "$current_version" != "$next_version" ]];
then
  ###################
  # tag the release #
  ###################
  if ! [[ $tag ]]; then
    printf "Enter a tag for this release (e.g. beta or rc): "
    read releaseTag

    if ! [[ $releaseTag ]]; then
      releaseTag="dev"
    fi

    tag=" --tag $releaseTag"
  fi
else
  if ! [[ $tag ]]; then
    tag=" --tag latest"
  fi
fi

######################
# update the version #
######################
next_version=$(npm version --no-git-tag-version --allow-same-version $next_version)

#######################
# Prepare the release #
#######################
printf "Installing version $next_version ...\n"
npm run clean
npm install
printf "Testing version $next_version ...\n"
npm test
printf "Building version $next_version ...\n"
npm run build

##############################
# Publish the release to npm #
##############################
printf "Running npm publish $build_path$tag\n"
npm publish $build_path$tag --access=public

###########################
# Deploy docs to gh-pages #
###########################
if [[ "$tag" == "latest" ]]; then
  printf "Deploying version $next_version of the documentation...\n"
  npm run deploy
fi

######################
# Tag release commit #
######################
printf "Tagging version $next_version ...\n"

# delete the local tag if it already exists
if [ "`git tag --list $next_version`" ]; then
  git tag -d $next_version
fi

git tag -am "Version $next_version" $next_version
git push origin $next_version

#######################################
# Success!!!! Return to origin branch #
#######################################
printf "Version $next_version was successfully released!\n"
git checkout -- .
git checkout $BRANCH
